{"ast":null,"code":"var _jsxFileName = \"/Users/agndj/Desktop/Coding/Fullstack Academy/Project-05/Strangers-Things-2/Strangers-Things-2/src/components/Webpages/Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// URL to make template literal\n// I could just save this in an API folder & import it everytime, i'll get to it eventually\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiBaseURL = \"https://strangers-things.herokuapp.com/api/2209-ftb-mt-web-ft\";\nconst Register = () => {\n  _s();\n  // Lets make state for the submission\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  async function formSubmitHandeler(event) {\n    event.preventDefault;\n    // The parameter will not refresh the page, but run the code\n    try {\n      // We want /users/register - 3a\n      fetch(`${apiBaseURL}/users/register`, {\n        method: \"POST\",\n        // All request (POST request) are made in all caps - 3b\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        // Data we are passing in & this will translate it to be readable -3c\n        body: JSON.stringify({\n          user: {\n            // Pass in variables from the state\n            username: username,\n            password: password\n          }\n        })\n      });\n\n      // Step -3d; translate promise response to json\n      const data = await response.json();\n      console.log(\"Translated json data\", data);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Step 5b - callback fn\n  // Username State\n  function updateUsernameState(event) {\n    console.log(\"This is the event target: \", event.target.value);\n    setUsername(event.target.value);\n  }\n\n  // Username Password\n  function updatePasswordState(event) {\n    console.log(\"This is the event target: \", event.target.value);\n    setPassword(event.target.value);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formSubmitHandeler,\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Enter New Username \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: username,\n        onChange: updateUsernameState => console.log(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Enter New Password \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: password,\n        onChange: updatePasswordState => console.log(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(Register, \"Lrw7JeD9zj6OUWhT/IH4OIvPKEk=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","ReactDOM","apiBaseURL","Register","username","setUsername","password","setPassword","formSubmitHandeler","event","preventDefault","fetch","method","headers","body","JSON","stringify","user","data","response","json","console","log","error","updateUsernameState","target","value","updatePasswordState"],"sources":["/Users/agndj/Desktop/Coding/Fullstack Academy/Project-05/Strangers-Things-2/Strangers-Things-2/src/components/Webpages/Register.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// URL to make template literal\n    // I could just save this in an API folder & import it everytime, i'll get to it eventually\nconst apiBaseURL = \"https://strangers-things.herokuapp.com/api/2209-ftb-mt-web-ft\";\n\nconst Register = () => {\n    // Lets make state for the submission\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    async function formSubmitHandeler (event) {\n        event.preventDefault\n            // The parameter will not refresh the page, but run the code\n        try {\n            // We want /users/register - 3a\n            fetch(`${apiBaseURL}/users/register`, {\n                method: \"POST\",\n                    // All request (POST request) are made in all caps - 3b\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                // Data we are passing in & this will translate it to be readable -3c\n                body: JSON.stringify({\n                    user: {\n                        // Pass in variables from the state\n                        username: username,\n                        password: password\n                    }\n                })\n            })\n\n            // Step -3d; translate promise response to json\n            const data = await response.json();\n            console.log(\"Translated json data\", data)\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n// Step 5b - callback fn\n    // Username State\n    function updateUsernameState(event) {\n        console.log(\"This is the event target: \", event.target.value)\n        setUsername(event.target.value)\n    }\n\n    // Username Password\n    function updatePasswordState(event) {\n        console.log(\"This is the event target: \", event.target.value)\n        setPassword(event.target.value)\n    }\n\n    return (\n        <div>\n            {/* Now we need to attach a callback fn to the form ele - Step 4*/}\n            <form onSubmit={formSubmitHandeler}>\n                {/* no refresh */}\n            <br/>\n\n            {/* Now lets connect text to .js - Step 5 */}\n                <label> Enter New Username </label>\n\n                {/* Step 5c - event listener to attach the inputs */}\n                <input type=\"text\" value={username} onChange={(updateUsernameState) => console.log(event.target.value)} ></input>\n                    {/* this updates the entered state (new state) to reflect - 5a */}\n\n                <br/> \n                <br/>\n\n                <label> Enter New Password </label>\n                <input type=\"text\" value={password} onChange={(updatePasswordState) => console.log(event.target.value)}></input>\n\n                <br/>\n                <br/>\n\n                <button type=\"submit\">Create Account</button>\n            </form>\n        </div>\n    )\n};\n\nexport default Register;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,WAAW;;AAEhC;AACI;AAAA;AACJ,MAAMC,UAAU,GAAG,+DAA+D;AAElF,MAAMC,QAAQ,GAAG,MAAM;EAAA;EACnB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE5C,eAAeQ,kBAAkB,CAAEC,KAAK,EAAE;IACtCA,KAAK,CAACC,cAAc;IAChB;IACJ,IAAI;MACA;MACAC,KAAK,CAAE,GAAET,UAAW,iBAAgB,EAAE;QAClCU,MAAM,EAAE,MAAM;QACV;QACJC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACD;QACAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBC,IAAI,EAAE;YACF;YACAb,QAAQ,EAAEA,QAAQ;YAClBE,QAAQ,EAAEA;UACd;QACJ,CAAC;MACL,CAAC,CAAC;;MAEF;MACA,MAAMY,IAAI,GAAG,MAAMC,QAAQ,CAACC,IAAI,EAAE;MAClCC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEJ,IAAI,CAAC;IAE7C,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACtB;EACJ;;EAEJ;EACI;EACA,SAASC,mBAAmB,CAACf,KAAK,EAAE;IAChCY,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEb,KAAK,CAACgB,MAAM,CAACC,KAAK,CAAC;IAC7DrB,WAAW,CAACI,KAAK,CAACgB,MAAM,CAACC,KAAK,CAAC;EACnC;;EAEA;EACA,SAASC,mBAAmB,CAAClB,KAAK,EAAE;IAChCY,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEb,KAAK,CAACgB,MAAM,CAACC,KAAK,CAAC;IAC7DnB,WAAW,CAACE,KAAK,CAACgB,MAAM,CAACC,KAAK,CAAC;EACnC;EAEA,oBACI;IAAA,uBAEI;MAAM,QAAQ,EAAElB,kBAAmB;MAAA,wBAEnC;QAAA;QAAA;QAAA;MAAA,QAAK,eAGD;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAmC,eAGnC;QAAO,IAAI,EAAC,MAAM;QAAC,KAAK,EAAEJ,QAAS;QAAC,QAAQ,EAAGoB,mBAAmB,IAAKH,OAAO,CAACC,GAAG,CAACb,KAAK,CAACgB,MAAM,CAACC,KAAK;MAAE;QAAA;QAAA;QAAA;MAAA,QAAU,eAGjH;QAAA;QAAA;QAAA;MAAA,QAAK,eACL;QAAA;QAAA;QAAA;MAAA,QAAK,eAEL;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAmC,eACnC;QAAO,IAAI,EAAC,MAAM;QAAC,KAAK,EAAEpB,QAAS;QAAC,QAAQ,EAAGqB,mBAAmB,IAAKN,OAAO,CAACC,GAAG,CAACb,KAAK,CAACgB,MAAM,CAACC,KAAK;MAAE;QAAA;QAAA;QAAA;MAAA,QAAS,eAEhH;QAAA;QAAA;QAAA;MAAA,QAAK,eACL;QAAA;QAAA;QAAA;MAAA,QAAK,eAEL;QAAQ,IAAI,EAAC,QAAQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAwB;IAAA;MAAA;MAAA;MAAA;IAAA;EAC1C;IAAA;IAAA;IAAA;EAAA,QACL;AAEd,CAAC;AAAC,GA3EIvB,QAAQ;AAAA,KAARA,QAAQ;AA6Ed,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module"}